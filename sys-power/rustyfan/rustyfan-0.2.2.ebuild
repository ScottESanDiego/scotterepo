# Copyright 2025 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

# Autogenerated by pycargoebuild 0.14.0

EAPI=8

CRATES="
	anstream@0.6.20
	anstyle-parse@0.2.7
	anstyle-query@1.1.4
	anstyle-wincon@3.0.10
	anstyle@1.0.11
	bitflags@2.9.4
	cfg-if@1.0.3
	cfg_aliases@0.2.1
	clap@4.5.47
	clap_builder@4.5.47
	clap_derive@4.5.47
	clap_lex@0.7.5
	colorchoice@1.0.4
	ctrlc@3.5.0
	directories@5.0.1
	dirs-sys@0.4.1
	dispatch@0.2.0
	equivalent@1.0.2
	getrandom@0.2.16
	hashbrown@0.15.5
	heck@0.5.0
	indexmap@2.11.0
	is_terminal_polyfill@1.70.1
	itoa@1.0.15
	libc@0.2.175
	libredox@0.1.9
	memchr@2.7.5
	nix@0.30.1
	once_cell_polyfill@1.70.1
	option-ext@0.2.0
	proc-macro2@1.0.101
	quote@1.0.40
	redox_users@0.4.6
	ryu@1.0.20
	serde@1.0.219
	serde_derive@1.0.219
	serde_json@1.0.143
	serde_spanned@0.6.9
	strsim@0.11.1
	syn@2.0.106
	thiserror-impl@1.0.69
	thiserror@1.0.69
	toml@0.8.23
	toml_datetime@0.6.11
	toml_edit@0.22.27
	toml_write@0.1.2
	unicode-ident@1.0.18
	utf8parse@0.2.2
	wasi@0.11.1+wasi-snapshot-preview1
	windows-link@0.1.3
	windows-link@0.2.0
	windows-sys@0.48.0
	windows-sys@0.60.2
	windows-sys@0.61.0
	windows-targets@0.48.5
	windows-targets@0.53.3
	windows_aarch64_gnullvm@0.48.5
	windows_aarch64_gnullvm@0.53.0
	windows_aarch64_msvc@0.48.5
	windows_aarch64_msvc@0.53.0
	windows_i686_gnu@0.48.5
	windows_i686_gnu@0.53.0
	windows_i686_gnullvm@0.53.0
	windows_i686_msvc@0.48.5
	windows_i686_msvc@0.53.0
	windows_x86_64_gnu@0.48.5
	windows_x86_64_gnu@0.53.0
	windows_x86_64_gnullvm@0.48.5
	windows_x86_64_gnullvm@0.53.0
	windows_x86_64_msvc@0.48.5
	windows_x86_64_msvc@0.53.0
	winnow@0.7.13
"

inherit cargo git-r3

DESCRIPTION="A simple fan control daemon written in Rust"
HOMEPAGE="https://github.com/ScottESanDiego/rustyfan"

# Fetch source code from a specific commit in the GitHub repository
EGIT_REPO_URI="https://github.com/ScottESanDiego/rustyfan.git"
# Specify the exact commit hash to use
EGIT_COMMIT="1c66f1e7e9c4329c8aae9933b2a5d3a306042dd4"

SRC_URI="
	${CARGO_CRATE_URIS}
"

LICENSE="MIT"
# Dependent crate licenses
LICENSE+="
	MIT MPL-2.0 Unicode-3.0
	|| ( Apache-2.0 Boost-1.0 )
"
SLOT="0"
KEYWORDS="~amd64"

# Dependencies:
# Build-time: dev-lang/rust (handled by cargo eclass)
# Runtime: None explicitly, relies on kernel hwmon/thermal interfaces
#          virtual/logger for elog logging in init script (if used by upstream script)
#          sys-apps/baselayout-openrc or sys-apps/openrc for OpenRC support
DEPEND="virtual/logger"

# Use the standard working directory layout for git-r3
# The version part of S needs to match the ebuild version (0_p20231120)
# git-r3 handles the source directory naming correctly based on PV
#S="${WORKDIR}/${PN}-${PV}" # PV will be 0_p20231120

# src_compile is handled by cargo_src_compile from the cargo eclass

src_unpack() {
	git-r3_src_unpack
	cargo_src_unpack
}

src_prepare() {
	cargo_gen_config
	default
}

src_install() {
	# Install the main binary using the cargo eclass helper
	# This installs to /usr/bin/${PN} by default
	cargo_src_install

    # Install the OpenRC init script provided by upstream
    # The script is located at init.d/rustyfan in the source directory
    # newinitd installs the script to /etc/init.d/${PN}
    newinitd "${S}/init.d/${PN}" "${PN}"

    # Install the example configuration file
    # Create the target directory /etc/rustyfan
    keepdir /etc/${PN}
	#
    # Install the config file from the source directory into /etc/rustyfan/
    # Rename it to config.toml.example to indicate it's an example
    insinto /etc/${PN}
    newins "${S}/etc/config.toml.example" config.toml.example
}

pkg_postinst() {
        # Display messages after installation to guide the user

        # Inform about the configuration file location and required action
       elog "An example configuration file has been installed to:"
       elog "/etc/${PN}/config.toml.example"
       elog "Please copy and edit it to /etc/${PN}/config.toml to configure rustyfan."
       elog "The service will likely fail to start without a valid configuration."
}
